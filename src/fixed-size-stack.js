
/**
 * A fixed-size stack implementation. If the stack exceeds its fixed size, the oldest elements are
 * removed (from the bottom of the stack).
 *
 * This class was generated by ChatGPT with human revision where needed.
 */
class FixedSizeStack {
	/** @param {number} size - The maximum size of the stack. */
	constructor(size) {
		this.size = /** @type {number} */ size;
		this.stack = /** @type {any[]} */ [];
	}

	/**
	 * Pushes one or more elements onto the stack.
	 * If the stack exceeds its size, the oldest elements are removed.
	 *
	 * @param {...any} elements - The elements to add to the stack.
	 */
	push(...elements) {
		const { stack, size } = this;
		stack.push(...elements);

		while (stack.length > size) {
			stack.shift();
		}
	}

	// noinspection FunctionNamingConventionJS
	/**
	 * Removes and returns the top element of the stack.
	 *
	 * @returns {any} The top element of the stack, or `undefined` if the stack is empty.
	 */
	pop() {
		return this.stack.pop();
	}

	/**
	 * Returns the top element of the stack without removing it.
	 * @returns {any} The top element of the stack, or `undefined` if the stack is empty.
	 */
	peek() {
		const { stack } = this;
		return stack[stack.length - 1];
	}

	/**
	 * Checks if the stack is empty.
	 *
	 * @returns {boolean} `true` if the stack contains no elements, otherwise `false`.
	 */
	isEmpty() {
		return this.stack.length === 0;
	}

	/**
	 * Converts the stack to an array.
	 *
	 * @returns {any[]} An array containing the elements of the stack.
	 */
	toArray() {
		return this.stack.slice();
	}
}

// Test cases, generated by ChatGPT.
if (require.main === module) {
	const assert = require('assert');

	const stack = new FixedSizeStack(3);

	console.log('Test initial state');
	assert.deepStrictEqual(stack.toArray(), [], 'Stack should initially be empty');

	console.log('Test pushing elements');
	stack.push(1, 2);
	assert.deepStrictEqual(stack.toArray(), [1, 2], 'Stack should contain [1, 2]');

	console.log('Test pushing elements beyond the size limit');
	stack.push(3, 4, 5);
	assert.deepStrictEqual(stack.toArray(), [3, 4, 5], 'Stack should contain [3, 4, 5] after pushing beyond limit');

	console.log('Test popping elements');
	const popped = stack.pop();
	assert.strictEqual(popped, 5, 'Popped element should be 5');
	assert.deepStrictEqual(stack.toArray(), [3, 4], 'Stack should contain [3, 4] after popping');

	console.log('Test peek functionality');
	assert.strictEqual(stack.peek(), 4, 'Peeked element should be 4');
	assert.deepStrictEqual(stack.toArray(), [3, 4], 'Stack should remain unchanged after peek');

	console.log('Test isEmpty functionality');
	stack.pop();
	stack.pop();
	assert.strictEqual(stack.isEmpty(), true, 'Stack should be empty after popping all elements');
	console.log('All tests passed!');
}

module.exports = {
	FixedSizeStack
};
